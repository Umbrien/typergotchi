app typergotchi {
  wasp: {
    version: "^0.10.4"
  },
  title: "typergotchi",
  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "Typergotchi",
          email: "daboi@mail.typergotchi.win",
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@server/auth/email.js",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@server/auth/email.js",
        },
        allowUnverifiedLogin: true,
      },
    },
    onAuthFailedRedirectTo: "/login"
  },
  emailSender: {
    provider: SMTP,
    defaultFrom: {
        name: "Typergotchi",
        email: "daboi@mail.typergotchi.win",
    },
  },
  db: {
    system: PostgreSQL,
    seeds: [
      import { seedDaBoiSkins } from "@server/dbSeeds.js",
      import { seedDaBoiArmors } from "@server/dbSeeds.js"
    ],
  },

  dependencies: [
    ("prettier", "^2.8.8"),
    ("@tailwindcss/forms", "^0.5.3"),
    ("esm-seedrandom", "3.0.5"),
    ("@aws-sdk/client-s3", "3.295.0"),
    ("node-fetch", "3.3.1"),
    ("jimp", "0.22.7"),
    ("@tabler/icons-react", "2.17.0"),
    ("zustand", "4.3.8")
  ]
}

entity User {=psl
  id                      Int           @id @default(autoincrement())
  email                   String?       @unique
  password                String?
  isEmailVerified         Boolean       @default(false)
  emailVerificationSentAt DateTime?
  passwordResetSentAt     DateTime?
  // registration step 2 fields
  nickname                String?       @unique
  description             String?
  balance                 Int           @default(0)
  soloPassings            SoloPassing[]
  inventory               Inventory?
  daBoiHappyImg           String?
  daBoiSadImg             String?
  daBoiSelectedSkinId     Int?
  daBoiSelectedSkin       DaBoiSkin?    @relation(fields: [daBoiSelectedSkinId], references: [id])
  daBoiSelectedArmorId    Int?
  daBoiSelectedArmor      DaBoiArmor?   @relation(fields: [daBoiSelectedArmorId], references: [id])
psl=}

entity SoloPassing {=psl
  id     Int  @id @default(autoincrement())
  cpm    Int
  userId Int
  user   User @relation(fields: [userId], references: [id])
psl=}

entity DaBoiSkin {=psl
  id       Int    @id @default(autoincrement())
  name     String
  imgHappy String
  imgSad   String
  user     User[]
psl=}

entity DaBoiArmor {=psl
  id         Int         @id @default(autoincrement())
  name       String      @unique
  price      Int
  img        String
  inventory  Inventory[]
  user       User[]
psl=}

entity Inventory {=psl
  id      Int          @id @default(autoincrement())
  userId  Int          @unique
  user    User         @relation(fields: [userId], references: [id])
  armorId Int          @unique
  armor   DaBoiArmor   @relation(fields: [armorId], references: [id])
psl=}


route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import Main from "@client/MainPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { LoginPage } from "@client/pages/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { SignupPage } from "@client/pages/auth/SignupPage"
}

route SignupStage2Route { path: "/signup-stage-2", to: SignupStage2Page }
page SignupStage2Page {
  component: import { SignupStage2 } from "@client/pages/auth/SignupStage2"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@client/pages/auth/RequestPasswordReset.tsx",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordReset } from "@client/pages/auth/PasswordReset.tsx",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerification } from "@client/pages/auth/EmailVerification.tsx",
}

route SoloModeRoute { path: "/solo-mode", to: SoloModePage }
page SoloModePage {
  component: import { SoloMode } from "@client/pages/soloMode.tsx",
}

query fetchDaBoiSkins {
  fn: import { getDaBoiSkins } from "@server/queries/daBoi.js",
  entities: [DaBoiSkin]
}

query fetchDaBoiArmor {
  fn: import { getDaBoiArmor } from "@server/queries/daBoi.js",
  entities: [DaBoiArmor]
}

query generateText {
  fn: import { generateText } from "@server/queries/generateText.js",
}

action registerStep2 {
  fn: import { registerStep2 } from "@server/actions/profile.js",
  entities: [User]
}

action addSoloPassing {
  fn: import { addSoloPassing } from "@server/actions/passings.js",
  entities: [SoloPassing]
}

action changeNickname {
  fn: import { changeNickname } from "@server/actions/profile.js",
  entities: [User]
}

action setDaBoiSkin {
  fn: import { setDaBoiSkin } from "@server/actions/profile.js",
  entities: [User]
}

action setDaBoiArmor {
  fn: import { setDaBoiArmor } from "@server/actions/profile.js",
  entities: [User, Inventory]
}

action buyDaBoiArmor {
  fn: import { buyDaBoiArmor } from "@server/actions/shop.js",
  entities: [User, Inventory, DaBoiArmor]
}

job generateImageJob {
  executor: PgBoss,
  perform: {
    fn: import { generateImage } from "@server/jobs/generateImageJob.js"
  }
}